#! /usr/bin/env python3

import glob
import os
import re
import shutil
import subprocess
import sys

__FILE__ = os.path.realpath(sys.argv[0])
__FILENAME__ = os.path.basename(sys.argv[0])
__DIR__ = os.path.dirname(__FILE__)
__DIRNAME__ = os.path.basename(__DIR__)
__ARGS__ = sys.argv[1:]

D = "/usr/bin/env docker"
DC = "/usr/bin/env docker-compose"
WRONG_USAGE_MESSAGE = f"\n\033[0;41m Usage: ./{__FILENAME__} build | force-build | start | stop | restart | rebuild | force-rebuild \033[0m\n"

if (len(__ARGS__) != 1):
    print(WRONG_USAGE_MESSAGE)

    exit(10)
else:
    __COMMAND__ = __ARGS__[0]

class Composer:
    def __init__(self):
        self.compose_files = None
        self.force_rebuild = False

        self.env_vars = dict()
        self.env_vars.update(os.environ)

    def _check_docker(self):
        sys.stdout.write(f"\033[93m Checking {D} ... \033[0m")

        try:
            version_string = subprocess.check_output(f"{D} --version", shell=True).decode("ISO-8859-1")
            version_match = re.search(r"version\sv?(?P<version>\d+(?:\.\d+)*)", version_string).group("version")
            (major, minor) = map(int, tuple(version_match.split(".")[:2]))

            if (major < 20):
                print(f"\n\033[0;41m {D} has incompatible version. Minimum required version is 20+ \033[0m\n")

                exit(11)

        except OSError:
            print(f"\n\033[0;41m {D} either not installed or not available in PATH \033[0m\n")

            exit(11)

        print("\033[92m success \033[0m")

    def _check_docker_compose(self):
        sys.stdout.write(f"\033[93m Checking {DC} ...\033[0m")

        try:
            version_string = subprocess.check_output(f"{DC} --version --short", shell=True).decode("ISO-8859-1")
            version_match = re.search(r"version\s(?P<version>\d+(?:\.\d+)*)", version_string).group("version")
            (major, minor) = map(int, tuple(version_match.split(".")[:2]))

            if (major < 1 or (major == 1 and minor < 26)):
                print(f"\n\033[0;41m {DC} has incompatible version. Minimum required version is 1.26+ \033[0m\n")

                exit(11)

        except OSError:
            print(f"\n\033[0;41m {DC} either not installed or not available in PATH \033[0m\n")

            exit(11)

        print("\033[92m success \033[0m")

    def _check_decorator(wrapped):
        def wrapper(self):
            if (wrapped.__name__ == __COMMAND__):
                self._check_docker()
                self._check_docker_compose()

            wrapped(self)

        return wrapper

    def find_compose_files(self):
        if (self.compose_files is None):
            compose_files = glob.glob("compose.yaml") + sorted(glob.glob("*/compose-sudoku.yaml"))
            compose_files = filter(lambda rel_path: "_noscan" not in rel_path, compose_files)
            compose_files = map(lambda rel_path: os.path.realpath(rel_path), compose_files)

            self.compose_files = list(compose_files)

        return self.compose_files

    @_check_decorator
    def check(self):
        pass

    @_check_decorator
    def build(self):
        src_scripts_dir = "./_common/_scripts"

        for compose_file in self.find_compose_files():
            compose_file_dir = os.path.realpath(os.path.dirname(compose_file))
            compose_file_docker_dir = next(iter(glob.glob(compose_file_dir + "/.docker") or []), None)

            if (compose_file_docker_dir is not None):
                dst_scripts_dir = compose_file_docker_dir + "/_scripts"

                if not os.path.exists(dst_scripts_dir):
                    os.mkdir(dst_scripts_dir)

                shutil.copyfile(f"{src_scripts_dir}/prepare_alpine_image.sh", f"{dst_scripts_dir}/prepare_alpine_image.sh")

            build_cmd = "build --no-cache" if self.force_rebuild is True else "build"
            exec_cmd = f"{DC} -f {compose_file} {build_cmd}"

            subprocess.call(exec_cmd, env=self.env_vars, shell=True)

    @_check_decorator
    def start(self):
        for compose_file in self.find_compose_files():
            subprocess.call(f"{DC} -f {compose_file} up -d", env=self.env_vars, shell=True)

    @_check_decorator
    def stop(self):
        for compose_file in reversed(self.find_compose_files()):
            subprocess.call(f"{DC} -f {compose_file} down", env=self.env_vars, shell=True)

    @_check_decorator
    def restart(self):
        self.stop()
        self.start()

    @_check_decorator
    def rebuild(self):
        self.stop()
        self.build()
        self.start()

composer = Composer()

if (__COMMAND__ == "check"):
    composer.check()

elif (__COMMAND__ == "build"):
    composer.build()

elif (__COMMAND__ == "force-build"):
    composer.force_rebuild = True
    composer.build()

elif (__COMMAND__ == "start"):
    composer.start()

elif (__COMMAND__ == "stop"):
    composer.stop()

elif (__COMMAND__ == "restart"):
    composer.restart()

elif (__COMMAND__ == "rebuild"):
    composer.rebuild()

elif (__COMMAND__ == "force-rebuild"):
    composer.force_rebuild = True
    composer.rebuild()

else:
    print(WRONG_USAGE_MESSAGE)

    exit(11)
